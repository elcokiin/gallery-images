name: CI/CD Pipeline to Cloud Run

on:
  push:
    branches:
      - main # Despliegue continuo a producción cuando se fusiona en main
      # - develop # Despliegue continuo a desarrollo cuando se fusiona en develop
      # - release/* # Opcional: Si usas ramas de release, también podrías desplegar desde aquí
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      # - main # Integración continua para PRs que van a main
      - develop # Integración continua para PRs que van a develop
      # # - feature/* # Opcional: Si quieres ejecutar CI en cada push a ramas feature

# Permisos mínimos requeridos para el workflow.
# 'contents: read' para checkout.
# 'id-token: write' si usas Workload Identity Federation (recomendado para GCP auth).
# 'pull-requests: read' para los triggers de PR.
permissions:
  contents: read # Necesario para actions/checkout
  id-token: write # Necesario para google-github-actions/auth si usas Workload Identity Federation
  pull-requests: read # Importante para los eventos de PR

env: # Variables de entorno globales para el workflow (opcional, pueden ir por job)
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }} # Región de Artifact Registry
  GAR_REPOSITORY: ${{ secrets.GAR_REPOSITORY }} # Nombre del repositorio de Artifact Registry
  CLOUD_RUN_SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }} # Nombre del servicio Cloud Run

jobs:
  # Job de Integración Continua: Construir, Testear, Verificar
  ci:
    name: Build and Test
    runs-on: ubuntu-latest # O otro runner si necesitas un SO específico

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Asegúrate de que coincida con la versión en tu Dockerfile

    - name: Install dependencies
      # --production=false instala devDependencies, necesarias para tests y linters
      run: npm install --production=false

    - name: Run Tests
      run: npm test
      env: # <-- Añade este bloque
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/dummy_credentials.json # El valor exacto no importa ya que VertexAI está mockeado
        GOOGLE_CLOUD_PROJECT: dummy-project-id 

  # Job de Despliegue Continuo: Dockerizar, Subir a GAR, Desplegar a Cloud Run
  # Este job SOLO se ejecutará si el job 'ci' pasa y si el trigger es un push a 'main'
  # Job de Despliegue Continuo vía SSH
  cd:
    name: Deploy via SSH
    # ... configuraciones del job cd ...

    steps:
    # ... Checkout code ...
    # ... Setup SSH Agent ...

    # --- Paso 2: Transferir Archivos al Servidor ---
    - name: Copy files via SCP
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }} "mkdir -p /home/${{ env.SSH_USERNAME }}/my-app"
        export PATH=$PATH:/home/app_deployer/.nvm/versions/node/v22.15.0/bin/npm

        scp -r -o StrictHostKeyChecking=no \
            ./* \
            ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }}:/home/${{ env.SSH_USERNAME }}/my-app/
      # Si usas appleboy/scp-action en su lugar, podrías necesitar una opción similar en esa acción.

    # --- Paso 3: Instalar Dependencias en el Servidor ---
    - name: Install dependencies on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        # password: ${{ env.SSH_PASSWORD }} # <--- PELIGROSO
        script: |
          export PATH=$PATH:/home/app_deployer/.nvm/versions/node/v22.15.0/bin/npm
          cd /home/${{ env.SSH_USERNAME }}/my-app
          npm install --production # Instala solo las dependencias de producción

    # --- Paso 4: Reiniciar la Aplicación en el Servidor (usando PM2) ---
    # Asegúrate de que PM2 también está en el PATH o usa su ruta completa si no
    - name: Restart application on server (PM2)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        # password: ${{ env.SSH_PASSWORD }} # <--- PELIGROSO
        script: |
          export PATH=$PATH:/home/app_deployer/.nvm/versions/node/v22.15.0/bin/npm

          cd /home/${{ env.SSH_USERNAME }}/my-app
          # Puedes usar 'which pm2' en el servidor para saber su ruta
          # Si pm2 no está en el PATH estándar, usa su ruta completa aquí:
          # /home/appdeployer/.nvm/versions/node/vX.Y.Z/bin/pm2 start ...
          pm2 start server.js --name my-app --update-env || pm2 restart my-app --update-env
          pm2 save # Guarda el estado de PM2

    # Puedes añadir pasos adicionales si usas systemd en lugar de PM2
    # - name: Restart application on server (systemd)
    #   uses: appleboy/ssh-action@v1.0.3
    #   with:
    #     host: ${{ env.SSH_HOST }}
    #     username: ${{ env.SSH_USERNAME }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     script: |
    #       # Necesitarás configurar sudo sin contraseña para el usuario deployer
    #       # si systemctl requiere sudo
    #       sudo systemctl restart my-app.service


    # --- Eliminar el paso de despliegue a Cloud Run ---
    # - name: Deploy to Cloud Run # <-- Eliminar este paso
    #   ...


    # --- Paso Opcional: Mostrar mensaje de éxito ---
    - name: Deployment Successful
      run: echo "Despliegue a ${{ env.SSH_HOST }} completado para la versión ${{ github.sha }}"