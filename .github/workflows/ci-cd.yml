name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Despliegue continuo a producción cuando se fusiona en main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop # Integración continua para PRs que van a develop

permissions:
  contents: read # Necesario para actions/checkout
  id-token: write # Necesario para autenticación
  pull-requests: read # Importante para los eventos de PR

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
  GAR_REPOSITORY: ${{ secrets.GAR_REPOSITORY }}
  CLOUD_RUN_SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }}
  # Variables para SSH
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}

jobs:
  ci:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install --production=false

    - name: Run Tests
      run: npm test
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/dummy_credentials.json
        GOOGLE_CLOUD_PROJECT: dummy-project-id 

  # Despliegue por SSH reemplazando el despliegue a Cloud Run
  cd:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: Production
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
    - name: Copy files via SCP
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }} "mkdir -p /home/${{ env.SSH_USERNAME }}/my-app"
        scp -r -o StrictHostKeyChecking=no \
            ./* \
            ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }}:/home/${{ env.SSH_USERNAME }}/my-app/
      
    - name: Install dependencies on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          export PATH=$PATH:/home/app_deployer/.nvm/versions/node/v22.15.0/bin
          cd /home/${{ env.SSH_USERNAME }}/my-app
          npm install --production
      
    - name: Restart application on server (PM2)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          export PATH=$PATH:/home/app_deployer/.nvm/versions/node/v22.15.0/bin
          cd /home/${{ env.SSH_USERNAME }}/my-app
          pm2 start server.js --name my-app --update-env || pm2 restart my-app --update-env
          pm2 save